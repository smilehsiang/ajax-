@{
    ViewData["Title"] = "Promise";
}

<h1>Promise</h1>


@section Scripts{
    <script>
        //等一秒，印出A>B>C
        //setTimeout(function () {
        //    console.log('A');
        //}, 1000);
        //setTimeout(function () {
        //    console.log('B');
        //}, 1000);
        //setTimeout(function () {
        //    console.log('C');
        //}, 1000);

        //等1秒印出C，再等1秒印出B，再等1秒印出A(全部印出要3秒鐘)
        //setTimeout(function () {
        //    console.log('A');
        //}, 3000);
        //setTimeout(function () {
        //    console.log('B');
        //}, 2000);
        //setTimeout(function () {
        //    console.log('C');
        //}, 1000);

        //等1秒印出A，再等1秒印出B，再等1秒印出C(全部印出要3秒鐘)
        //setTimeout(function () {
        //    console.log('A');
        //    setTimeout(function () {
        //        console.log('B');
        //        setTimeout(function () {
        //            console.log('C');
        //        }, 1000);
        //    }, 1000);
        //}, 1000);


        //建立Promise物件
        //const promise = new Promise((resolve,reject)=>{
        //     const num = Math.random() > 0.5 ? 1 : 0;
        //     console.log(num)
        //     if(num){
        //         resolve("成功")
        //     }else{
        //         reject("錯誤")
        //     }
        //})

        function printSomething(data) {
            return new Promise((resolve, reject) => {
                setTimeout(() => {
                    resolve(data + 1)
                }, 1000)
            })
        }

        // console.log(printSomething("A"));  //這裡會得到 Promise物件，要取出Promise物件的資料要透過then()
        printSomething("A")
            .then(d => {
                console.log(d)  //A1
                return printSomething("B")
            })
            .then(d => {
                console.log(d)   //B1
                return printSomething("C")
            })
            .then(d => {
                console.log(d)  //C1
            })

                //使用
                //promise
                //    .then(data=>{
                //        console.log(data)
                //    })
                //    .catch(error=>{
                //        console.log(error)
                //    })
                //    .finally(()=>{
                //        console.log("end")
                //    })

                //promise 為了解決callback hell的問題所產生的語法
                //要如何取得promise物件中的資料 promise.then(data=>{  }).catch(error=>{ })
    </script>



}
